/*
 * Copyright (c) 2015 Wave Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package pl.wavesoftware.eid;

import pl.wavesoftware.eid.api.Configurator;
import pl.wavesoftware.eid.api.EidContainer;
import pl.wavesoftware.eid.api.Eid;
import pl.wavesoftware.eid.api.EidMessage;
import pl.wavesoftware.eid.api.SerializableSupplier;
import pl.wavesoftware.eid.api.Supplier;
import pl.wavesoftware.eid.api.Validator;

import javax.annotation.Nullable;

import static pl.wavesoftware.eid.system.EidModule.MODULE;

/**
 * <h3>The Idea</h3>
 * <p>
 * The main idea of this library is to use a set of simple runtime exceptions to
 * speedup development and make it more professional in the same time. Those
 * exceptions should always take the Exception ID (Eid for short) object on
 * construction. The Eid object should be generated by developer while writing
 * code and committed in the constructor of an exception. This eid object will
 * then be reported when that exception is being displayed or logged.
 * <p><p>
 * This approach simplifies the management of exceptions in the application and
 * allows developers to focus on functionality and code quality, rather than
 * coming up with the correct statement for the exception.
 * <p><p>
 * This error number is perfect to be displayed on the error "500" page for your
 * application as a bug reference. It's good idea, because it is static, so wil
 * l not change in subsequent invocations, but it also do not disclose the
 * actual reason why bug occurred.
 * <p><p>
 * This approach is best to use with tools and IDE plugins like:
 * <ul>
 * <li><a href="https://goo.gl/VTHTGq">Generating Exception Id number in
 * Intellij IDEA with Live Templates</a></li>
 * <li><a href="http://plugins.netbeans.org/plugin/53137/exception-id-eid-generator">
 * EidGenerator for Netbeans IDE</a></li>
 * </ul>
 * <p>
 * Error page can say something like:
 * <p>
 * <blockquote><em>
 * We are deeply sorry. A fatal error occurred.<br/>
 * The reference number is: 20150721:100554<br/>
 * <br/>
 * Wait a couple of minutes, and try again. If the
 * same error number persists, call IT support.
 * </em></blockquote>
 * <p><p>
 * That error page is easy to implement, because all those exceptions implement
 * {@link EidContainer} interface.
 * <p>
 * <p>
 * Usage example:
 * <pre>
 * throw new EidIllegalStateException("20150721:100554", cause);
 * </pre>
 * Example log:
 * <pre>
 * pl.wavesoftware.eid.exceptions.EidIllegalStateException: [20150721:100554]&lt;g0qrwx&gt; => Zipfile in invalid format
 * 	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
 * 	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
 *
 * Caused by: java.util.zip.DataFormatException: Zipfile in invalid format
 * 	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
 * 	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
 * 	... 62 more
 * </pre>
 * <p>
 * Eid number contains also additional unique ID to distinguish each single
 * exception from others with same Eid.
 *
 * <h4>Caution</h4>
 * <p>
 * Those classes shouldn't be used in any public API or library - those should
 * have proper checked exceptions build in design. It's designed to be used for
 * in-house development of end user applications which will report bugs in
 * standardized error pages or post them to issue tracker.
 * <p><p>
 * Remember! You should never catch a runtime exception, in place other then
 * appropriate error page.
 *
 * <h4>Notice</h4>
 * <p>
 * Check out {@code EidPreconditions} class for ease of use utility checks.
 * <p>
 * You can tweak behavior of Eid with {@link Configurator}.
 *
 * @author <a href="mailto:krzysztof.suszynski@wavesoftware.pl">Krzysztof Suszynski</a>
 * @see EidContainer
 * @see Configurator
 * @since 0.1.0
 */
public class DefaultEid implements Eid {

    private static final long serialVersionUID = 20181029193034L;

    private transient String id;
    @Nullable
    private transient String ref;
    private final SerializableSupplier<String> uniqueId = MODULE
        .getBinding()
        .getFactories()
        .getLazyFactory()
        .lazy(new Supplier<String>() {
            @Override
            public String get() {
                return MODULE.getBinding()
                    .getConfigurationSystem()
                    .getConfiguration()
                    .getIdGenerator()
                    .generateUniqId();
            }
        });

    /**
     * Constructor a single value of exception ID.
     *
     * @param id the exception id, should be uniquely generated by developer
     */
    public DefaultEid(CharSequence id) {
        this.id = validate(id).toString();
        this.ref = null;
    }

    /**
     * Constructor with two values an exception ID and reference of some sort.
     * The second reference can be used to hold reference from external system.
     *
     * @param id  the exception id, should be uniquely generated by developer
     * @param ref a reference from external system
     */
    public DefaultEid(CharSequence id, CharSequence ref) {
        this.id = validate(id).toString();
        this.ref = ref.toString();
    }

    /**
     * A static factory method for Eid object that takes a single value of
     * exception ID.
     *
     * @param id the exception id, should be uniquely generated by developer
     * @return a created Eid object
     */
    public static Eid eid(String id) {
        return new DefaultEid(id);
    }

    @Override
    public String getId() {
        return id;
    }

    @Override
    @Nullable
    public String getRef() {
        return ref;
    }

    @Override
    public boolean hasRef() {
        return getRef() != null;
    }

    @Override
    public String getUnique() {
        return uniqueId.get();
    }

    @Override
    public EidMessage message(
        CharSequence messageTemplate,
        Object... templateArguments
    ) {
        return MODULE.getBinding()
            .getFactories()
            .getMessageFactory()
            .create(
                this,
                messageTemplate,
                templateArguments
            );
    }

    @Override
    public String toString() {
        return MODULE.getBinding()
            .getConfigurationSystem()
            .getConfiguration()
            .getFormatter()
            .format(this);
    }

    /*
    Suppress warnings id here for null check. Users can pass null event if it's
    forbidden.
     */
    @SuppressWarnings({"ConstantConditions", "squid:S2583"})
    private static CharSequence validate(CharSequence id) {
        if (id == null) {
            throw new IllegalArgumentException("Exception ID can't be null");
        }
        if (isInvalid(id)) {
            throw new IllegalArgumentException(
                "Invalid ID given as an Exception ID: " + id
            );
        }
        return id;
    }

    private static boolean isInvalid(CharSequence id) {
        Validator validator = getValidator();
        return validator != null && !validator.isValid(id);
    }

    @Nullable
    private static Validator getValidator() {
        return MODULE.getBinding()
            .getConfigurationSystem()
            .getConfiguration()
            .getValidator();
    }
}

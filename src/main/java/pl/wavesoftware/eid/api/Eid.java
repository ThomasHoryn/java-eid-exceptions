/*
 * Copyright (c) 2018 Wave Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package pl.wavesoftware.eid.api;

import javax.annotation.Nullable;
import java.io.Serializable;

/**
 * <h3>The Idea</h3>
 * <p>
 * The main idea of this library is to use a set of simple runtime exceptions to
 * speedup development and make it more professional in the same time. Those
 * exceptions should always take the Exception ID (Eid for short) object on
 * construction. The Eid object should be generated by developer while writing
 * code and committed in the constructor of an exception. This eid object will
 * then be reported when that exception is being displayed or logged.
 * <p><br>
 * This approach simplifies the management of exceptions in the application and
 * allows developers to focus on functionality and code quality, rather than
 * coming up with the correct statement for the exception.
 * <p><br>
 * This error number is perfect to be displayed on the error "500" page for your
 * application as a bug reference. It's good idea, because it is static, so wil
 * l not change in subsequent invocations, but it also do not disclose the
 * actual reason why bug occurred.
 * <p><br>
 * This approach is best to use with tools and IDE plugins like:
 * <ul>
 * <li><a href="https://goo.gl/VTHTGq">Generating Exception Id number in
 * Intellij IDEA with Live Templates</a></li>
 * <li><a href="http://plugins.netbeans.org/plugin/53137/exception-id-eid-generator">
 * EidGenerator for Netbeans IDE</a></li>
 * </ul>
 * <p>
 * Error page can say something like:
 * <p><br>
 * <blockquote><em>
 * We are deeply sorry. A fatal error occurred.<br>
 * The reference number is: 20150721:100554<br>
 * <br>
 * Wait a couple of minutes, and try again. If the
 * same error number persists, call IT support.
 * </em></blockquote>
 * <p><br>
 * That error page is easy to implement, because all those exceptions implement
 * {@link EidContainer} interface.
 * <p><br>
 * Usage example:
 * <pre>
 * throw new EidIllegalStateException("20150721:100554", cause);
 * </pre>
 * Example log:
 * <pre>
 * pl.wavesoftware.eid.exceptions.EidIllegalStateException: [20150721:100554]&lt;g0qrwx&gt; =&gt; Zipfile in invalid format
 * 	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
 * 	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
 *
 * Caused by: java.util.zip.DataFormatException: Zipfile in invalid format
 * 	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
 * 	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
 * 	... 62 more
 * </pre>
 * <p>
 * Eid number contains also additional unique ID to distinguish each single
 * exception from others with same Eid.
 *
 * <h4>Caution</h4>
 * <p>
 * Those classes shouldn't be used in any public API or library - those should
 * have proper checked exceptions build in design. It's designed to be used for
 * in-house development of end user applications which will report bugs in
 * standardized error pages or post them to issue tracker.
 * <p><br>
 * Remember! You should never catch a runtime exception, in place other then
 * appropriate error page.
 *
 * <h4>Notice</h4>
 * <p>
 * Check out {@code EidPreconditions} class for ease of use utility checks.
 * <p>
 * You can tweak behavior of Eid with {@link Configurator}.
 *
 * @author <a href="mailto:krzysztof.suszynski@wavesoftware.pl">Krzysztof Suszynski</a>
 * @see EidContainer
 * @see Configurator
 * @since 2.0.0
 */
public interface Eid extends Serializable {
    /**
     * Getter for constant Exception ID
     *
     * @return ID of exception
     */
    String getId();

    /**
     * Get an external reference passed to Exception ID
     *
     * @return an external reference, or null if not set
     */
    @Nullable
    String getRef();

    /**
     * Do this Exception ID has an external reference number?
     *
     * @return true, if has an external reference
     */
    boolean hasRef();

    /**
     * Gets unique generated string for this instance of Eid
     *
     * @return a unique string
     */
    String getUnique();

    /**
     * Creates a message object from this Eid, with given message template and
     * template arguments. Message template and arguments will be interpolated
     * using {@link java.text.MessageFormat#format(String, Object...)} method.
     *
     * @param messageTemplate   a message format
     * @param templateArguments a message format arguments that will be
     *                          interpolated to format string
     * @return a message object
     */
    EidMessage message(
        CharSequence messageTemplate,
        Object... templateArguments
    );
}
